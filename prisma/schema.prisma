// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          Role      @default(USER)
  avatar        String?
  bio           String?   @db.Text
  website       String?
  location      String?
  isVerified    Boolean   @default(false)
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isEmailVerified Boolean @default(false)
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  passwordResetToken String?
  passwordResetExpires DateTime?

  // Relations
  posts         Post[]
  notes         Note[]
  comments      Comment[]
  likes         Like[]
  follows       Follow[]  @relation("UserFollows")
  followers     Follow[]  @relation("UserFollowers")
  notifications Notification[]
  sentMessages  Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  userAnalytics UserAnalytics[]
  postAnalytics PostAnalytics[]

  @@map("users")
}

model Post {
  id          String      @id @default(cuid())
  title       String
  content     String      @db.LongText
  excerpt     String?     @db.Text
  slug        String      @unique
  status      PostStatus  @default(PUBLISHED)
  accessLevel AccessLevel @default(PUBLIC)
  featured    Boolean     @default(false)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  authorId    String
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  likes       Like[]
  tags        PostTag[]
  images      PostImage[]
  analytics   PostAnalytics[]

  @@map("posts")
}

model Note {
  id          String      @id @default(cuid())
  title       String
  content     String      @db.LongText
  color       String?     @default("#ffffff")
  isPinned    Boolean     @default(false)
  isArchived  Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  authorId    String
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags        NoteTag[]
  images      NoteImage[]

  @@map("notes")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes     Like[]

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("likes")
}

model Follow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())

  // Relations
  followerId  String
  follower    User     @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  senderId  String
  sender    User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver  User     @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())

  // Relations
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String   @default("#3b82f6")
  createdAt DateTime @default(now())

  // Relations
  posts     PostTag[]
  notes     NoteTag[]

  @@map("tags")
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String

  // Relations
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("post_tags")
}

model NoteTag {
  id     String @id @default(cuid())
  noteId String
  tagId  String

  // Relations
  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([noteId, tagId])
  @@map("note_tags")
}

model PostImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("post_images")
}

model NoteImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  noteId    String
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@map("note_images")
}

model UserAnalytics {
  id                String   @id @default(cuid())
  date              DateTime @default(now())
  postsCreated      Int      @default(0)
  commentsMade      Int      @default(0)
  likesGiven        Int      @default(0)
  followersGained   Int      @default(0)
  profileViews      Int      @default(0)
  totalViews        Int      @default(0)

  // Relations
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("user_analytics")
}

model PostAnalytics {
  id          String   @id @default(cuid())
  date        DateTime @default(now())
  views       Int      @default(0)
  uniqueViews Int      @default(0)
  likes       Int      @default(0)
  comments    Int      @default(0)
  shares      Int      @default(0)

  // Relations
  postId      String
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, date])
  @@map("post_analytics")
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum AccessLevel {
  PUBLIC
  INTERNAL
  PRIVATE
}

enum NotificationType {
  COMMENT
  LIKE
  FOLLOW
  MENTION
  SYSTEM
  TRENDING
}
